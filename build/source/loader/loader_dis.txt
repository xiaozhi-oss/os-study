
D:/Work/CWork/os-study/diy-x86os-master/start/start/build/source/loader/loader.elf:     file format elf32-i386
D:/Work/CWork/os-study/diy-x86os-master/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000515 memsz 0x00000515 flags r-x
    LOAD off    0x00001518 vaddr 0x00009518 paddr 0x00009518 align 2**12
         filesz 0x00000018 memsz 0x0000007c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004df  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000036  000084df  000084df  000014df  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00009518  00009518  00001518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  00009540  00009540  00001530  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001548  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000630  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000027d  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030c  00000000  00000000  00001e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00002164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031f  00000000  00000000  00002394  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
000084df l    d  .rodata	00000000 .rodata
00009518 l    d  .data	00000000 .data
00009540 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000002a inb
00008042 l     F .text	0000002d outb
0000806f l     F .text	0000000b cli
0000807a l     F .text	00000036 lgdt
000080b0 l     F .text	0000001a read_cr0
000080ca l     F .text	0000001a write_cr0
000080e4 l     F .text	0000002b far_jump
00009540 l     O .bss	00000054 boot_info
0000810f l     F .text	0000003b show_msg
0000814a l     F .text	00000136 detect_memory
00008280 l     F .text	00000096 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
0000833c l     F .text	0000001d inb
00008359 l     F .text	0000001f inw
00008378 l     F .text	0000001f outb
00008397 l     F .text	0000012f read_disk
00008316 g     F .text	00000026 loader_entry
00009518 g     O .data	00000018 gdt_table
000084c6 g     F .text	00000019 load_kernel
00008000 g       .text	00000000 _start
00009530 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
00009530 g       .data	00000000 _edata
00009594 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
  	.code16
 	.text
	.global _start 
	.extern loader_entry
_start:
	jmp loader_entry
    8000:	e9 13 03             	jmp    8316 <loader_entry>

00008003 <protect_mode_entry>:
	.global protect_mode_entry
	.extern load_kernel

protect_mode_entry:		// 入口标号
	# 重置寄存器，目前寄存器是16位的，我们需要将他们改为32位模式
	mov $16, %ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax, %ds
	mov %ax, %es
    8009:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    800b:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    800d:	8e e8                	mov    %ax,%gs
	mov %ax, %ss
    800f:	8e d0                	mov    %ax,%ss

	# jmp $selector, $addr：直接跳转命令，它会直接跳转到selector指定代码段中执行，addr表示在代码段中的位置
	# jmp $addr：相对跳转指令，它会根据当前指令的位置计算相对与该指令的偏移量，使用该偏移量进行跳转
	jmp $8, $load_kernel	# 跳转到为 8 的代码段中的 $load_kernel位置执行
    8011:	ea c6 84 00 00       	ljmp   $0x0,$0x84c6
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <inb>:

/**
 * 二进制的方式从指定的 I/O端口 中读取数据
 * 
 */
static inline uint8_t inb (uint16_t port) {
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    801d:	66 83 ec 14          	sub    $0x14,%esp
    8021:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8026:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t rv;

    // inb al, dx
    __asm__ __volatile__ ("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
    802a:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8030:	66 89 c2             	mov    %eax,%edx
    8033:	ec                   	in     (%dx),%al
    8034:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    return rv;
    8038:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    803e:	66 c9                	leavel 
    8040:	66 c3                	retl   

00008042 <outb>:
/**
 * 二进制的方式将数据传给指定的 I/O端口
 *  @port 端口
 *  @data 数据
 */
static inline void outb (uint16_t port, uint8_t data) {
    8042:	66 55                	push   %ebp
    8044:	66 89 e5             	mov    %esp,%ebp
    8047:	66 83 ec 08          	sub    $0x8,%esp
    804b:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    8050:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8055:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8059:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    // outb al, dx
    __asm__ __volatile__ ("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    805d:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8063:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8069:	ee                   	out    %al,(%dx)
}
    806a:	90                   	nop
    806b:	66 c9                	leavel 
    806d:	66 c3                	retl   

0000806f <cli>:

// inline修饰：内联函数 -> 将代码直接插入到调用的位置上
/**
 * cli：将IF标志位设置为0，关闭中断
 */ 
static inline void cli (void) {
    806f:	66 55                	push   %ebp
    8071:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__ ("cli");
    8074:	fa                   	cli    
}
    8075:	90                   	nop
    8076:	66 5d                	pop    %ebp
    8078:	66 c3                	retl   

0000807a <lgdt>:
}

/**
 * 加载 GDT 表，开启保护模式
 */ 
static inline void lgdt (uint32_t start, uint32_t size) {
    807a:	66 55                	push   %ebp
    807c:	66 89 e5             	mov    %esp,%ebp
    807f:	66 83 ec 10          	sub    $0x10,%esp
        uint16_t limit;         // 长度
        uint16_t start15_0;     // 低16位
        uint16_t start31_16;    // 高6位
    } gdt;
    
    gdt.start31_16 = start >> 16;
    8083:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8088:	66 c1 e8 10          	shr    $0x10,%eax
    808c:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0XFFFF;
    8090:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8095:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
    8099:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    809e:	66 83 e8 01          	sub    $0x1,%eax
    80a2:	67 89 45 fa          	mov    %ax,-0x6(%ebp)
        lgdt：
            加载全局描述符，将GDT表的地址加载到GDTR寄存器中，
            用于告诉处理器GDT表的位置和大小.
            GDTR寄存器：48位的寄存器，数据包括基地址（低32位）和限制（大小，低16位）
     */
    __asm__ __volatile__ ("lgdt %[g]"::[g]"m"(gdt));
    80a6:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
}
    80ab:	90                   	nop
    80ac:	66 c9                	leavel 
    80ae:	66 c3                	retl   

000080b0 <read_cr0>:
    读取处理器的控制寄存器 CR0 的值，并将其返回
    cr0：控制寄存器 CR0 是x86体系结构中的一个特殊寄存器，
         包含了一系列的控制标志位，用于控制处理器的各种行为和特性，
         通过它可以确定处理器是否启用了分页机制、是否启用了浮点数协处理器等。
 */
static inline uint16_t read_cr0 (void) {
    80b0:	66 55                	push   %ebp
    80b2:	66 89 e5             	mov    %esp,%ebp
    80b5:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;
    __asm__ __volatile__ ("mov %%cr0, %[v]":[v]"=r"(cr0));
    80b9:	0f 20 c0             	mov    %cr0,%eax
    80bc:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    return cr0;
    80c1:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c6:	66 c9                	leavel 
    80c8:	66 c3                	retl   

000080ca <write_cr0>:

/**
 * 改写 CR0 的值
 */ 
static inline uint16_t write_cr0 (uint32_t v) {
    80ca:	66 55                	push   %ebp
    80cc:	66 89 e5             	mov    %esp,%ebp
    80cf:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;
    __asm__ __volatile__ ("mov %[v], %%cr0"::[v]"r"(v));
    80d3:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d8:	0f 22 c0             	mov    %eax,%cr0
    return cr0;
    80db:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80e0:	66 c9                	leavel 
    80e2:	66 c3                	retl   

000080e4 <far_jump>:
/**
 * 远跳转操作，切换到指定的代码段
 *  @selector 选择子
 *  @offset 偏移量
 */
static inline void far_jump(uint32_t selector, uint32_t offset) {
    80e4:	66 55                	push   %ebp
    80e6:	66 89 e5             	mov    %esp,%ebp
    80e9:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
    80ed:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80f2:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80f7:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80fc:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__ ("ljmpl *(%[a])" :: [a]"r"(addr));
    8101:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    8106:	67 66 ff 28          	ljmpl  *(%eax)
}
    810a:	90                   	nop
    810b:	66 c9                	leavel 
    810d:	66 c3                	retl   

0000810f <show_msg>:

/**
 *  显示字符串
 *  @msg 字符串
 */
static void show_msg (const char * msg) {
    810f:	66 55                	push   %ebp
    8111:	66 89 e5             	mov    %esp,%ebp
    8114:	66 83 ec 10          	sub    $0x10,%esp
    char c;

    while ((c = *msg++) != '\0') {
    8118:	eb 0c                	jmp    8126 <show_msg+0x17>
        asm __volatile__ (
    811a:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8120:	b4 0e                	mov    $0xe,%ah
    8122:	88 c0                	mov    %al,%al
    8124:	cd 10                	int    $0x10
    while ((c = *msg++) != '\0') {
    8126:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    812b:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8130:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    8135:	67 66 0f b6 00       	movzbl (%eax),%eax
    813a:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    813e:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    8143:	75 d5                	jne    811a <show_msg+0xb>
	        "int $0x10"
            :
            :[ch]"r"(c)
        );
    }   
}
    8145:	90                   	nop
    8146:	66 c9                	leavel 
    8148:	66 c3                	retl   

0000814a <detect_memory>:

/**
 *   检测内存
 */
static void detect_memory (void) {
    814a:	66 55                	push   %ebp
    814c:	66 89 e5             	mov    %esp,%ebp
    814f:	66 57                	push   %edi
    8151:	66 56                	push   %esi
    8153:	66 53                	push   %ebx
    8155:	66 83 ec 30          	sub    $0x30,%esp
    uint32_t contID = 0;
    8159:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8160:	00 00 
    uint32_t signature, bytes;
    SMAP_entry_t smap_entry;
    show_msg("try to detect memory:");
    8162:	66 68 df 84 00 00    	pushl  $0x84df
    8168:	66 e8 a1 ff ff ff    	calll  810f <show_msg>
    816e:	66 83 c4 04          	add    $0x4,%esp
    boot_info.ram_region_count = 0;
    8172:	66 c7 06 90 95 00 00 	movl   $0x0,-0x6a70
    8179:	00 00 
    for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    817b:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    8182:	00 00 
    8184:	e9 e0 00             	jmp    8267 <detect_memory+0x11d>
        SMAP_entry_t * entry = &smap_entry;
    8187:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    818c:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

        __asm__ __volatile__ ("int $0x15"
    8191:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8197:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    819c:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    81a2:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a8:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81ad:	66 89 f7             	mov    %esi,%edi
    81b0:	cd 15                	int    $0x15
    81b2:	66 89 da             	mov    %ebx,%edx
    81b5:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81ba:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81bf:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
                : "=a"(signature), "=c"(bytes), "=b"(contID)
                : "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
        if (signature != 0x534D4150) {
    81c4:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81cb:	4d 53 
    81cd:	74 13                	je     81e2 <detect_memory+0x98>
            show_msg("failed\r\n");
    81cf:	66 68 f5 84 00 00    	pushl  $0x84f5
    81d5:	66 e8 34 ff ff ff    	calll  810f <show_msg>
    81db:	66 83 c4 04          	add    $0x4,%esp
            return;
    81df:	e9 8f 00             	jmp    8271 <detect_memory+0x127>
        }
        if (bytes > 20 && (entry->ACPI & 0x0001) == 0) {
    81e2:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e8:	76 13                	jbe    81fd <detect_memory+0xb3>
    81ea:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81ef:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81f4:	66 83 e0 01          	and    $0x1,%eax
    81f8:	66 85 c0             	test   %eax,%eax
    81fb:	74 63                	je     8260 <detect_memory+0x116>
            continue;
        }
        if (entry->Type ==1) {
    81fd:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8202:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8207:	66 83 f8 01          	cmp    $0x1,%eax
    820b:	75 39                	jne    8246 <detect_memory+0xfc>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    820d:	66 a1 90 95          	mov    0x9590,%eax
    8211:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8216:	67 66 8b 12          	mov    (%edx),%edx
    821a:	67 66 89 14 c5 40 95 	mov    %edx,0x9540(,%eax,8)
    8221:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    8223:	66 a1 90 95          	mov    0x9590,%eax
    8227:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    822c:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8231:	67 66 89 14 c5 44 95 	mov    %edx,0x9544(,%eax,8)
    8238:	00 00 
            boot_info.ram_region_count++;
    823a:	66 a1 90 95          	mov    0x9590,%eax
    823e:	66 83 c0 01          	add    $0x1,%eax
    8242:	66 a3 90 95          	mov    %eax,0x9590
        }
        if (contID == 0) {
    8246:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    824c:	75 13                	jne    8261 <detect_memory+0x117>
            show_msg("ok\r\n");
    824e:	66 68 fe 84 00 00    	pushl  $0x84fe
    8254:	66 e8 b5 fe ff ff    	calll  810f <show_msg>
    825a:	66 83 c4 04          	add    $0x4,%esp
            break;
    825e:	eb 11                	jmp    8271 <detect_memory+0x127>
            continue;
    8260:	90                   	nop
    for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    8261:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    8267:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    826d:	0f 8e 16 ff          	jle    8187 <detect_memory+0x3d>
        }
    }
}
    8271:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8276:	66 5b                	pop    %ebx
    8278:	66 5e                	pop    %esi
    827a:	66 5f                	pop    %edi
    827c:	66 5d                	pop    %ebp
    827e:	66 c3                	retl   

00008280 <enter_protect_mode>:
};

/**
 *  进入保护模式
 */
static void enter_protect_mode (void) {
    8280:	66 55                	push   %ebp
    8282:	66 89 e5             	mov    %esp,%ebp
    8285:	66 83 ec 10          	sub    $0x10,%esp
    cli();
    8289:	66 e8 e0 fd ff ff    	calll  806f <cli>

    uint8_t v = inb(0x92);
    828f:	66 68 92 00 00 00    	pushl  $0x92
    8295:	66 e8 7d fd ff ff    	calll  8018 <inb>
    829b:	66 83 c4 04          	add    $0x4,%esp
    829f:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92, v | 0x2);
    82a3:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82a9:	66 83 c8 02          	or     $0x2,%eax
    82ad:	66 0f b6 c0          	movzbl %al,%eax
    82b1:	66 50                	push   %eax
    82b3:	66 68 92 00 00 00    	pushl  $0x92
    82b9:	66 e8 83 fd ff ff    	calll  8042 <outb>
    82bf:	66 83 c4 08          	add    $0x8,%esp

    lgdt((uint32_t) gdt_table, sizeof(gdt_table));
    82c3:	66 b8 18 95 00 00    	mov    $0x9518,%eax
    82c9:	66 6a 18             	pushl  $0x18
    82cc:	66 50                	push   %eax
    82ce:	66 e8 a6 fd ff ff    	calll  807a <lgdt>
    82d4:	66 83 c4 08          	add    $0x8,%esp

    uint32_t cr0 = read_cr0();
    82d8:	66 e8 d2 fd ff ff    	calll  80b0 <read_cr0>
    82de:	66 0f b7 c0          	movzwl %ax,%eax
    82e2:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(cr0 | (1 << 0));
    82e7:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82ec:	66 83 c8 01          	or     $0x1,%eax
    82f0:	66 50                	push   %eax
    82f2:	66 e8 d2 fd ff ff    	calll  80ca <write_cr0>
    82f8:	66 83 c4 04          	add    $0x4,%esp

    far_jump(8, (uint32_t)protect_mode_entry);
    82fc:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    8302:	66 50                	push   %eax
    8304:	66 6a 08             	pushl  $0x8
    8307:	66 e8 d7 fd ff ff    	calll  80e4 <far_jump>
    830d:	66 83 c4 08          	add    $0x8,%esp
}
    8311:	90                   	nop
    8312:	66 c9                	leavel 
    8314:	66 c3                	retl   

00008316 <loader_entry>:

void loader_entry (void) {
    8316:	66 55                	push   %ebp
    8318:	66 89 e5             	mov    %esp,%ebp
    show_msg("....loading....\n\r");
    831b:	66 68 03 85 00 00    	pushl  $0x8503
    8321:	66 e8 e8 fd ff ff    	calll  810f <show_msg>
    8327:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    832b:	66 e8 19 fe ff ff    	calll  814a <detect_memory>
    enter_protect_mode();
    8331:	66 e8 49 ff ff ff    	calll  8280 <enter_protect_mode>
}
    8337:	90                   	nop
    8338:	66 c9                	leavel 
    833a:	66 c3                	retl   

0000833c <inb>:
static inline uint8_t inb (uint16_t port) {
    833c:	55                   	push   %bp
    833d:	89 e5                	mov    %sp,%bp
    833f:	83 ec 14             	sub    $0x14,%sp
    8342:	8b 45 08             	mov    0x8(%di),%ax
    8345:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__ ("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
    8349:	0f b7 45 ec          	movzww -0x14(%di),%ax
    834d:	89 c2                	mov    %ax,%dx
    834f:	ec                   	in     (%dx),%al
    8350:	88 45 ff             	mov    %al,-0x1(%di)
    return rv;
    8353:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    8357:	c9                   	leave  
    8358:	c3                   	ret    

00008359 <inw>:
static inline uint16_t inw (uint16_t port) {
    8359:	55                   	push   %bp
    835a:	89 e5                	mov    %sp,%bp
    835c:	83 ec 14             	sub    $0x14,%sp
    835f:	8b 45 08             	mov    0x8(%di),%ax
    8362:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__ ("in %1, %0" : "=a"(rv) : "dN"(port));
    8366:	0f b7 45 ec          	movzww -0x14(%di),%ax
    836a:	89 c2                	mov    %ax,%dx
    836c:	66 ed                	in     (%dx),%eax
    836e:	66 89 45 fe          	mov    %eax,-0x2(%di)
    return rv;
    8372:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    8376:	c9                   	leave  
    8377:	c3                   	ret    

00008378 <outb>:
static inline void outb (uint16_t port, uint8_t data) {
    8378:	55                   	push   %bp
    8379:	89 e5                	mov    %sp,%bp
    837b:	83 ec 08             	sub    $0x8,%sp
    837e:	8b 55 08             	mov    0x8(%di),%dx
    8381:	8b 45 0c             	mov    0xc(%di),%ax
    8384:	66 89 55 fc          	mov    %edx,-0x4(%di)
    8388:	88 45 f8             	mov    %al,-0x8(%di)
    __asm__ __volatile__ ("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    838b:	0f b7 55 fc          	movzww -0x4(%di),%dx
    838f:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    8393:	ee                   	out    %al,(%dx)
}
    8394:	90                   	nop
    8395:	c9                   	leave  
    8396:	c3                   	ret    

00008397 <read_disk>:
#include "loader.h"

/**
 * 使用 LBA48模式 读取磁盘
 */
static void read_disk(uint32_t sector, uint32_t sector_count, uint8_t *buf) {
    8397:	55                   	push   %bp
    8398:	89 e5                	mov    %sp,%bp
    839a:	53                   	push   %bx
    839b:	83 ec 10             	sub    $0x10,%sp
    outb(0x1F6, (uint8_t) (0xE0));
    839e:	68 e0 00             	push   $0xe0
    83a1:	00 00                	add    %al,(%bx,%si)
    83a3:	68 f6 01             	push   $0x1f6
    83a6:	00 00                	add    %al,(%bx,%si)
    83a8:	e8 cb ff             	call   8376 <inw+0x1d>
    83ab:	ff                   	(bad)  
    83ac:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	outb(0x1F2, (uint8_t) (sector_count >> 8));
    83b0:	8b 45 0c             	mov    0xc(%di),%ax
    83b3:	c1 e8 08             	shr    $0x8,%ax
    83b6:	0f b6 c0             	movzbw %al,%ax
    83b9:	50                   	push   %ax
    83ba:	68 f2 01             	push   $0x1f2
    83bd:	00 00                	add    %al,(%bx,%si)
    83bf:	e8 b4 ff             	call   8376 <inw+0x1d>
    83c2:	ff                   	(bad)  
    83c3:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3, (uint8_t) (sector >> 24));		// LBA参数的24~31位
    83c7:	8b 45 08             	mov    0x8(%di),%ax
    83ca:	c1 e8 18             	shr    $0x18,%ax
    83cd:	0f b6 c0             	movzbw %al,%ax
    83d0:	50                   	push   %ax
    83d1:	68 f3 01             	push   $0x1f3
    83d4:	00 00                	add    %al,(%bx,%si)
    83d6:	e8 9d ff             	call   8376 <inw+0x1d>
    83d9:	ff                   	(bad)  
    83da:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, (uint8_t) (0));					// LBA参数的32~39位
    83de:	6a 00                	push   $0x0
    83e0:	68 f4 01             	push   $0x1f4
    83e3:	00 00                	add    %al,(%bx,%si)
    83e5:	e8 8e ff             	call   8376 <inw+0x1d>
    83e8:	ff                   	(bad)  
    83e9:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, (uint8_t) (0));					// LBA参数的40~47位
    83ed:	6a 00                	push   $0x0
    83ef:	68 f5 01             	push   $0x1f5
    83f2:	00 00                	add    %al,(%bx,%si)
    83f4:	e8 7f ff             	call   8376 <inw+0x1d>
    83f7:	ff                   	(bad)  
    83f8:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F2, (uint8_t) (sector_count));
    83fc:	8b 45 0c             	mov    0xc(%di),%ax
    83ff:	0f b6 c0             	movzbw %al,%ax
    8402:	50                   	push   %ax
    8403:	68 f2 01             	push   $0x1f2
    8406:	00 00                	add    %al,(%bx,%si)
    8408:	e8 6b ff             	call   8376 <inw+0x1d>
    840b:	ff                   	(bad)  
    840c:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F3, (uint8_t) (sector));			// LBA参数的0~7位
    8410:	8b 45 08             	mov    0x8(%di),%ax
    8413:	0f b6 c0             	movzbw %al,%ax
    8416:	50                   	push   %ax
    8417:	68 f3 01             	push   $0x1f3
    841a:	00 00                	add    %al,(%bx,%si)
    841c:	e8 57 ff             	call   8376 <inw+0x1d>
    841f:	ff                   	(bad)  
    8420:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F4, (uint8_t) (sector >> 8));		// LBA参数的8~15位
    8424:	8b 45 08             	mov    0x8(%di),%ax
    8427:	c1 e8 08             	shr    $0x8,%ax
    842a:	0f b6 c0             	movzbw %al,%ax
    842d:	50                   	push   %ax
    842e:	68 f4 01             	push   $0x1f4
    8431:	00 00                	add    %al,(%bx,%si)
    8433:	e8 40 ff             	call   8376 <inw+0x1d>
    8436:	ff                   	(bad)  
    8437:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F5, (uint8_t) (sector >> 16));		// LBA参数的16~23位
    843b:	8b 45 08             	mov    0x8(%di),%ax
    843e:	c1 e8 10             	shr    $0x10,%ax
    8441:	0f b6 c0             	movzbw %al,%ax
    8444:	50                   	push   %ax
    8445:	68 f5 01             	push   $0x1f5
    8448:	00 00                	add    %al,(%bx,%si)
    844a:	e8 29 ff             	call   8376 <inw+0x1d>
    844d:	ff                   	(bad)  
    844e:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	outb(0x1F7, (uint8_t) 0x24);
    8452:	6a 24                	push   $0x24
    8454:	68 f7 01             	push   $0x1f7
    8457:	00 00                	add    %al,(%bx,%si)
    8459:	e8 1a ff             	call   8376 <inw+0x1d>
    845c:	ff                   	(bad)  
    845d:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	// 读取数据
	uint16_t *data_buf = (uint16_t*) buf;
    8461:	8b 45 10             	mov    0x10(%di),%ax
    8464:	89 45 f8             	mov    %ax,-0x8(%di)
	while (sector_count-- > 0) {
    8467:	eb 4a                	jmp    84b3 <read_disk+0x11c>
		// 每次扇区读之前都要检查，等待数据就绪
		while ((inb(0x1F7) & 0x88) != 0x8) {}
    8469:	90                   	nop
    846a:	68 f7 01             	push   $0x1f7
    846d:	00 00                	add    %al,(%bx,%si)
    846f:	e8 c8 fe             	call   833a <loader_entry+0x24>
    8472:	ff                   	(bad)  
    8473:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    8477:	0f b6 c0             	movzbw %al,%ax
    847a:	25 88 00             	and    $0x88,%ax
    847d:	00 00                	add    %al,(%bx,%si)
    847f:	83 f8 08             	cmp    $0x8,%ax
    8482:	75 e6                	jne    846a <read_disk+0xd3>

		// 读取并将数据写入到缓存中
		for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    8484:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    8489:	00 00                	add    %al,(%bx,%si)
    848b:	eb 1d                	jmp    84aa <read_disk+0x113>
			*data_buf++ = inw(0x1F0);
    848d:	8b 5d f8             	mov    -0x8(%di),%bx
    8490:	8d 43 02             	lea    0x2(%bp,%di),%ax
    8493:	89 45 f8             	mov    %ax,-0x8(%di)
    8496:	68 f0 01             	push   $0x1f0
    8499:	00 00                	add    %al,(%bx,%si)
    849b:	e8 b9 fe             	call   8357 <inb+0x1b>
    849e:	ff                   	(bad)  
    849f:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    84a3:	66 89 03             	mov    %eax,(%bp,%di)
		for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    84a6:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    84aa:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    84af:	00 00                	add    %al,(%bx,%si)
    84b1:	7e da                	jle    848d <read_disk+0xf6>
	while (sector_count-- > 0) {
    84b3:	8b 45 0c             	mov    0xc(%di),%ax
    84b6:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    84b9:	89 55 0c             	mov    %dx,0xc(%di)
    84bc:	85 c0                	test   %ax,%ax
    84be:	75 a9                	jne    8469 <read_disk+0xd2>
		}
	}
     
}
    84c0:	90                   	nop
    84c1:	8b 5d fc             	mov    -0x4(%di),%bx
    84c4:	c9                   	leave  
    84c5:	c3                   	ret    

000084c6 <load_kernel>:

void load_kernel (void) {
    84c6:	55                   	push   %bp
    84c7:	89 e5                	mov    %sp,%bp
    // 读取的扇区数尽可能大一些，kernel.elf文件可能会很大
    read_disk(100, 500, (uint8_t *) SYS_KERNEL_LOAD_ADDR);
    84c9:	68 00 00             	push   $0x0
    84cc:	10 00                	adc    %al,(%bx,%si)
    84ce:	68 f4 01             	push   $0x1f4
    84d1:	00 00                	add    %al,(%bx,%si)
    84d3:	6a 64                	push   $0x64
    84d5:	e8 bd fe             	call   8395 <outb+0x1d>
    84d8:	ff                   	(bad)  
    84d9:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)
    for (;;) {}
    84dd:	eb fe                	jmp    84dd <load_kernel+0x17>
