
D:/Work/CWork/os-study/diy-x86os-master/start/start/build/source/loader/loader.elf:     file format elf32-i386
D:/Work/CWork/os-study/diy-x86os-master/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000378 memsz 0x00000378 flags r-x
    LOAD off    0x00001378 vaddr 0x00009378 paddr 0x00009378 align 2**12
         filesz 0x00000018 memsz 0x0000007c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000342  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000036  00008342  00008342  00001342  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00009378  00009378  00001378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  000093a0  000093a0  00001390  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000013a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004e4  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001aa  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000263  00000000  00000000  00001a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00001cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f8  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
00008342 l    d  .rodata	00000000 .rodata
00009378 l    d  .data	00000000 .data
000093a0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000002a inb
00008042 l     F .text	0000002d outb
0000806f l     F .text	0000000b cli
0000807a l     F .text	00000037 lgdt
000080b1 l     F .text	0000001a read_cr0
000080cb l     F .text	0000001a write_cr0
000080e5 l     F .text	0000002b far_jump
000093a0 l     O .bss	00000054 boot_info
00008110 l     F .text	0000003b show_msg
0000814b l     F .text	00000136 detect_memory
00008281 l     F .text	00000096 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008317 g     F .text	00000026 loader_entry
00009378 g     O .data	00000018 gdt_table
0000833d g     F .text	00000005 load_kernel
00008000 g       .text	00000000 _start
00009390 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
00009390 g       .data	00000000 _edata
000093f4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
  	.code16
 	.text
	.global _start 
	.extern loader_entry
_start:
	jmp loader_entry
    8000:	e9 14 03             	jmp    8317 <loader_entry>

00008003 <protect_mode_entry>:
	.global protect_mode_entry
	.extern load_kernel

protect_mode_entry:		// 入口标号
	// 重置寄存器，目前寄存器是16位的，我们需要将他们改为32位模式
	mov $16, %ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax, %ds
	mov %ax, %es
    8009:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    800b:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    800d:	8e e8                	mov    %ax,%gs
	mov %ax, %ss
    800f:	8e d0                	mov    %ax,%ss

	jmp $8, $load_kernel
    8011:	ea 3d 83 00 00       	ljmp   $0x0,$0x833d
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <inb>:
#ifndef CPU_INSTR_H
#define CPU_INSTR_H

#include "types.h"

static inline uint8_t inb (uint16_t port) {
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    801d:	66 83 ec 14          	sub    $0x14,%esp
    8021:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8026:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t rv;

    // inb al, dx
    __asm__ __volatile__ ("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
    802a:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8030:	66 89 c2             	mov    %eax,%edx
    8033:	ec                   	in     (%dx),%al
    8034:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    return rv;
    8038:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    803e:	66 c9                	leavel 
    8040:	66 c3                	retl   

00008042 <outb>:

static inline void outb (uint16_t port, uint8_t data) {
    8042:	66 55                	push   %ebp
    8044:	66 89 e5             	mov    %esp,%ebp
    8047:	66 83 ec 08          	sub    $0x8,%esp
    804b:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    8050:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8055:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8059:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    // outb al, dx
    __asm__ __volatile__ ("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    805d:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8063:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8069:	ee                   	out    %al,(%dx)
}
    806a:	90                   	nop
    806b:	66 c9                	leavel 
    806d:	66 c3                	retl   

0000806f <cli>:

// inline修饰：内联函数 -> 将代码直接插入到调用的位置上
static inline void cli (void) {
    806f:	66 55                	push   %ebp
    8071:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__ ("cli");
    8074:	fa                   	cli    
}
    8075:	90                   	nop
    8076:	66 5d                	pop    %ebp
    8078:	66 c3                	retl   

0000807a <lgdt>:

static inline void sti (void) {
    __asm__ __volatile__ ("sti");
}

static inline void lgdt (uint32_t start, uint32_t size) {
    807a:	66 55                	push   %ebp
    807c:	66 89 e5             	mov    %esp,%ebp
    807f:	66 83 ec 10          	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint32_t start31_16;
    } gdt;
    
    gdt.start31_16 = start >> 16;
    8083:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8088:	66 c1 e8 10          	shr    $0x10,%eax
    808c:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    gdt.start15_0 = start & 0XFFFF;
    8091:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8096:	67 89 45 fa          	mov    %ax,-0x6(%ebp)
    gdt.limit = size - 1;
    809a:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    809f:	66 83 e8 01          	sub    $0x1,%eax
    80a3:	67 89 45 f8          	mov    %ax,-0x8(%ebp)

    __asm__ __volatile__ ("lgdt %[g]"::[g]"m"(gdt));
    80a7:	67 0f 01 55 f8       	lgdtw  -0x8(%ebp)
}
    80ac:	90                   	nop
    80ad:	66 c9                	leavel 
    80af:	66 c3                	retl   

000080b1 <read_cr0>:

static inline uint16_t read_cr0 (void) {
    80b1:	66 55                	push   %ebp
    80b3:	66 89 e5             	mov    %esp,%ebp
    80b6:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;
    __asm__ __volatile__ ("mov %%cr0, %[v]":[v]"=r"(cr0));
    80ba:	0f 20 c0             	mov    %cr0,%eax
    80bd:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    return cr0;
    80c2:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c7:	66 c9                	leavel 
    80c9:	66 c3                	retl   

000080cb <write_cr0>:

static inline uint16_t write_cr0 (uint32_t v) {
    80cb:	66 55                	push   %ebp
    80cd:	66 89 e5             	mov    %esp,%ebp
    80d0:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;
    __asm__ __volatile__ ("mov %[v], %%cr0"::[v]"r"(v));
    80d4:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d9:	0f 22 c0             	mov    %eax,%cr0
    return cr0;
    80dc:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80e1:	66 c9                	leavel 
    80e3:	66 c3                	retl   

000080e5 <far_jump>:

static inline void far_jump(uint32_t selector, uint32_t offset) {
    80e5:	66 55                	push   %ebp
    80e7:	66 89 e5             	mov    %esp,%ebp
    80ea:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
    80ee:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80f3:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80f8:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80fd:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__ ("ljmpl *(%[a])"::[a]"r"(addr));
    8102:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    8107:	67 66 ff 28          	ljmpl  *(%eax)
}
    810b:	90                   	nop
    810c:	66 c9                	leavel 
    810e:	66 c3                	retl   

00008110 <show_msg>:

/**
 *  显示字符串
 *  @msg 字符串
 */
static void show_msg (const char * msg) {
    8110:	66 55                	push   %ebp
    8112:	66 89 e5             	mov    %esp,%ebp
    8115:	66 83 ec 10          	sub    $0x10,%esp
    char c;

    while ((c = *msg++) != '\0') {
    8119:	eb 0c                	jmp    8127 <show_msg+0x17>
        asm __volatile__ (
    811b:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8121:	b4 0e                	mov    $0xe,%ah
    8123:	88 c0                	mov    %al,%al
    8125:	cd 10                	int    $0x10
    while ((c = *msg++) != '\0') {
    8127:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    812c:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8131:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    8136:	67 66 0f b6 00       	movzbl (%eax),%eax
    813b:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    813f:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    8144:	75 d5                	jne    811b <show_msg+0xb>
	        "int $0x10"
            :
            :[ch]"r"(c)
        );
    }   
}
    8146:	90                   	nop
    8147:	66 c9                	leavel 
    8149:	66 c3                	retl   

0000814b <detect_memory>:

/**
 *   检测内存
 */
static void detect_memory (void) {
    814b:	66 55                	push   %ebp
    814d:	66 89 e5             	mov    %esp,%ebp
    8150:	66 57                	push   %edi
    8152:	66 56                	push   %esi
    8154:	66 53                	push   %ebx
    8156:	66 83 ec 30          	sub    $0x30,%esp
    uint32_t contID = 0;
    815a:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8161:	00 00 
    uint32_t signature, bytes;
    SMAP_entry_t smap_entry;
    show_msg("try to detect memory:");
    8163:	66 68 42 83 00 00    	pushl  $0x8342
    8169:	66 e8 a1 ff ff ff    	calll  8110 <show_msg>
    816f:	66 83 c4 04          	add    $0x4,%esp
    boot_info.ram_region_count = 0;
    8173:	66 c7 06 f0 93 00 00 	movl   $0x0,-0x6c10
    817a:	00 00 
    for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    817c:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    8183:	00 00 
    8185:	e9 e0 00             	jmp    8268 <detect_memory+0x11d>
        SMAP_entry_t * entry = &smap_entry;
    8188:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    818d:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

        __asm__ __volatile__ ("int $0x15"
    8192:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8198:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    819d:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    81a3:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a9:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81ae:	66 89 f7             	mov    %esi,%edi
    81b1:	cd 15                	int    $0x15
    81b3:	66 89 da             	mov    %ebx,%edx
    81b6:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81bb:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81c0:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
                : "=a"(signature), "=c"(bytes), "=b"(contID)
                : "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
        if (signature != 0x534D4150) {
    81c5:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81cc:	4d 53 
    81ce:	74 13                	je     81e3 <detect_memory+0x98>
            show_msg("failed\r\n");
    81d0:	66 68 58 83 00 00    	pushl  $0x8358
    81d6:	66 e8 34 ff ff ff    	calll  8110 <show_msg>
    81dc:	66 83 c4 04          	add    $0x4,%esp
            return;
    81e0:	e9 8f 00             	jmp    8272 <detect_memory+0x127>
        }
        if (bytes > 20 && (entry->ACPI & 0x0001) == 0) {
    81e3:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e9:	76 13                	jbe    81fe <detect_memory+0xb3>
    81eb:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81f0:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81f5:	66 83 e0 01          	and    $0x1,%eax
    81f9:	66 85 c0             	test   %eax,%eax
    81fc:	74 63                	je     8261 <detect_memory+0x116>
            continue;
        }
        if (entry->Type ==1) {
    81fe:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8203:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8208:	66 83 f8 01          	cmp    $0x1,%eax
    820c:	75 39                	jne    8247 <detect_memory+0xfc>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    820e:	66 a1 f0 93          	mov    0x93f0,%eax
    8212:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8217:	67 66 8b 12          	mov    (%edx),%edx
    821b:	67 66 89 14 c5 a0 93 	mov    %edx,0x93a0(,%eax,8)
    8222:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    8224:	66 a1 f0 93          	mov    0x93f0,%eax
    8228:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    822d:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8232:	67 66 89 14 c5 a4 93 	mov    %edx,0x93a4(,%eax,8)
    8239:	00 00 
            boot_info.ram_region_count++;
    823b:	66 a1 f0 93          	mov    0x93f0,%eax
    823f:	66 83 c0 01          	add    $0x1,%eax
    8243:	66 a3 f0 93          	mov    %eax,0x93f0
        }
        if (contID == 0) {
    8247:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    824d:	75 13                	jne    8262 <detect_memory+0x117>
            show_msg("ok\r\n");
    824f:	66 68 61 83 00 00    	pushl  $0x8361
    8255:	66 e8 b5 fe ff ff    	calll  8110 <show_msg>
    825b:	66 83 c4 04          	add    $0x4,%esp
            break;
    825f:	eb 11                	jmp    8272 <detect_memory+0x127>
            continue;
    8261:	90                   	nop
    for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    8262:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    8268:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    826e:	0f 8e 16 ff          	jle    8188 <detect_memory+0x3d>
        }
    }
}
    8272:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8277:	66 5b                	pop    %ebx
    8279:	66 5e                	pop    %esi
    827b:	66 5f                	pop    %edi
    827d:	66 5d                	pop    %ebp
    827f:	66 c3                	retl   

00008281 <enter_protect_mode>:
};

/**
 *  进入保护模式
 */
static void enter_protect_mode (void) {
    8281:	66 55                	push   %ebp
    8283:	66 89 e5             	mov    %esp,%ebp
    8286:	66 83 ec 10          	sub    $0x10,%esp
    cli();
    828a:	66 e8 df fd ff ff    	calll  806f <cli>

    uint8_t v = inb(0x92);
    8290:	66 68 92 00 00 00    	pushl  $0x92
    8296:	66 e8 7c fd ff ff    	calll  8018 <inb>
    829c:	66 83 c4 04          	add    $0x4,%esp
    82a0:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92, v | 0x2);
    82a4:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82aa:	66 83 c8 02          	or     $0x2,%eax
    82ae:	66 0f b6 c0          	movzbl %al,%eax
    82b2:	66 50                	push   %eax
    82b4:	66 68 92 00 00 00    	pushl  $0x92
    82ba:	66 e8 82 fd ff ff    	calll  8042 <outb>
    82c0:	66 83 c4 08          	add    $0x8,%esp

    lgdt((uint32_t) gdt_table, sizeof(gdt_table));
    82c4:	66 b8 78 93 00 00    	mov    $0x9378,%eax
    82ca:	66 6a 18             	pushl  $0x18
    82cd:	66 50                	push   %eax
    82cf:	66 e8 a5 fd ff ff    	calll  807a <lgdt>
    82d5:	66 83 c4 08          	add    $0x8,%esp

    uint32_t cr0 = read_cr0();
    82d9:	66 e8 d2 fd ff ff    	calll  80b1 <read_cr0>
    82df:	66 0f b7 c0          	movzwl %ax,%eax
    82e3:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(cr0 | (1 << 0));
    82e8:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82ed:	66 83 c8 01          	or     $0x1,%eax
    82f1:	66 50                	push   %eax
    82f3:	66 e8 d2 fd ff ff    	calll  80cb <write_cr0>
    82f9:	66 83 c4 04          	add    $0x4,%esp

    far_jump(8, (uint32_t) protect_mode_entry);
    82fd:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    8303:	66 50                	push   %eax
    8305:	66 6a 08             	pushl  $0x8
    8308:	66 e8 d7 fd ff ff    	calll  80e5 <far_jump>
    830e:	66 83 c4 08          	add    $0x8,%esp
}
    8312:	90                   	nop
    8313:	66 c9                	leavel 
    8315:	66 c3                	retl   

00008317 <loader_entry>:

void loader_entry (void) {
    8317:	66 55                	push   %ebp
    8319:	66 89 e5             	mov    %esp,%ebp
    show_msg("....loading....\n\r");
    831c:	66 68 66 83 00 00    	pushl  $0x8366
    8322:	66 e8 e8 fd ff ff    	calll  8110 <show_msg>
    8328:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    832c:	66 e8 19 fe ff ff    	calll  814b <detect_memory>
    enter_protect_mode();
    8332:	66 e8 49 ff ff ff    	calll  8281 <enter_protect_mode>
}
    8338:	90                   	nop
    8339:	66 c9                	leavel 
    833b:	66 c3                	retl   

0000833d <load_kernel>:
/**
 * 加载
 */
void load_kernel (void) {
    833d:	55                   	push   %bp
    833e:	89 e5                	mov    %sp,%bp
    for (;;) {}
    8340:	eb fe                	jmp    8340 <load_kernel+0x3>
